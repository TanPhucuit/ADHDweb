"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { Send, User, Loader2, Brain, Calendar, Award, Pill, TrendingUp, AlertCircle, Settings } from "lucide-react"
import { apiService } from "@/lib/api-service"
import { MarkdownRenderer } from "@/components/ui/markdown-renderer"
import Link from "next/link"

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: Date
  suggestions?: string[]
  actionCards?: ActionCard[]
}

interface ActionCard {
  type: "schedule" | "reward" | "assessment" | "medication" | "focus"
  title: string
  description: string
  action: string
  data?: any
}

interface AIChatProps {
  context?: string
  childId?: string
}

export function AIChat({ context, childId = "child-1" }: AIChatProps) {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [childData, setChildData] = useState<any>(null)
  const [isDataLoading, setIsDataLoading] = useState(true)
  const [apiConfigured, setApiConfigured] = useState(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    checkApiConfiguration()
  }, [])

  const checkApiConfiguration = () => {
    if (typeof window !== "undefined") {
      const apiKey = localStorage.getItem("openai_api_key") || process.env.OPENAI_API_KEY
      setApiConfigured(!!apiKey)
    }
  }

  // Load child data and initialize chat
  useEffect(() => {
    loadChildData()
  }, [childId])

  const loadChildData = async () => {
    try {
      setIsDataLoading(true)
      
      // Load real data from API instead of dataStore
      let child = null
      let rewardProfile = null
      let medicationLogs = []
      
      try {
        // Try to get real data from API
        const [rewards, medications] = await Promise.all([
          apiService.getRewardPoints(childId).catch(() => null),
          apiService.getMedicationLogs(childId).catch(() => [])
        ])
        
        // Create child object
        child = {
          name: "B·∫°n nh·ªè",
          age: 11,
          id: childId
        }
        
        // Create reward profile from API data
        if (rewards) {
          rewardProfile = {
            totalPointsEarned: rewards.totalStars,
            currentPoints: rewards.totalStars,
            level: Math.floor(rewards.totalStars / 50) + 1,
            streakDays: 0,
            dailyStickers: { unicorn: rewards.breakdown?.scheduleActivities || 0 },
            dailyBadges: { superStar: rewards.breakdown?.medicationLogs || 0 }
          }
        }
        
        medicationLogs = medications || []
        
      } catch (error) {
        console.error("Error loading real data:", error)
        // Use fallback data
        child = { name: "B·∫°n nh·ªè", age: 8 }
        rewardProfile = null
        medicationLogs = []
      }

      const data = {
        child: child || { name: "B·∫°n nh·ªè", age: 8 },
        currentSession: null, // TODO: Get from API when available
        todayReport: null, // TODO: Get from API when available
        rewardProfile,
        weeklyAssessment: null, // TODO: Get from API when available
        medicationLogs: medicationLogs || [],
      }

      setChildData(data)

      // Initialize with personalized welcome message
      const welcomeMessage: Message = {
        id: "welcome",
        role: "assistant",
        content: generateWelcomeMessage(data, context),
        timestamp: new Date(),
        suggestions: [
          "L√†m th·∫ø n√†o ƒë·ªÉ c·∫£i thi·ªán kh·∫£ nƒÉng t·∫≠p trung?",
          "T·∫°o l·ªãch tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p",
          "T∆∞ v·∫•n v·ªÅ thu·ªëc ADHD",
          "Ph∆∞∆°ng ph√°p Pomodoro c√≥ hi·ªáu qu·∫£ kh√¥ng?",
          "C√°ch x√¢y d·ª±ng th√≥i quen t√≠ch c·ª±c",
        ],
      }

      setMessages([welcomeMessage])
    } catch (error) {
      console.error("Error loading child data:", error)
      const fallbackData = {
        child: { name: "B·∫°n nh·ªè", age: 8 },
        currentSession: null,
        todayReport: null,
        rewardProfile: null,
        weeklyAssessment: null,
        medicationLogs: [],
      }
      setChildData(fallbackData)

      const errorMessage: Message = {
        id: "error",
        role: "assistant",
        content:
          "Xin ch√†o! T√¥i l√† Dr. AI, tr·ª£ l√Ω ADHD c·ªßa b·∫°n. Hi·ªán t·∫°i c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ khi t·∫£i d·ªØ li·ªáu, nh∆∞ng t√¥i v·∫´n c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√°c c√¢u h·ªèi v·ªÅ ADHD.",
        timestamp: new Date(),
        suggestions: [
          "L√†m th·∫ø n√†o ƒë·ªÉ c·∫£i thi·ªán kh·∫£ nƒÉng t·∫≠p trung?",
          "T·∫°o l·ªãch tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p",
          "T∆∞ v·∫•n v·ªÅ thu·ªëc ADHD",
          "Ph∆∞∆°ng ph√°p Pomodoro c√≥ hi·ªáu qu·∫£ kh√¥ng?",
        ],
      }
      setMessages([errorMessage])
    } finally {
      setIsDataLoading(false)
    }
  }

  const generateWelcomeMessage = (data: any, context?: string) => {
    const { child, todayReport, rewardProfile, weeklyAssessment } = data

    let message = `Xin ch√†o! T√¥i l√† Dr. AI, tr·ª£ l√Ω chuy√™n v·ªÅ ADHD c·ªßa ${child?.name || "b·∫°n"}. `

    if (context) {
      message += `T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n v·ªõi ${context}. `
    }

    if (todayReport?.totalFocusTime && todayReport?.averageFocusScore) {
      message += `\n\nüìä **T√¨nh h√¨nh h√¥m nay:**\n`
      message += `‚Ä¢ Th·ªùi gian t·∫≠p trung: ${todayReport.totalFocusTime} ph√∫t\n`
      message += `‚Ä¢ ƒêi·ªÉm t·∫≠p trung trung b√¨nh: ${todayReport.averageFocusScore}/100\n`
    }

    if (rewardProfile?.currentPoints && rewardProfile?.level) {
      message += `\nüèÜ **ƒêi·ªÉm th∆∞·ªüng hi·ªán t·∫°i:** ${rewardProfile.currentPoints} ƒëi·ªÉm (C·∫•p ${rewardProfile.level})\n`
    }

    if (weeklyAssessment?.overallProgress) {
      const progress = weeklyAssessment.overallProgress
      const progressEmoji =
        progress === "excellent" ? "üåü" : progress === "good" ? "üëç" : progress === "fair" ? "‚ö°" : "üîÑ"
      message += `\n${progressEmoji} **Ti·∫øn ƒë·ªô tu·∫ßn n√†y:** ${getProgressText(progress)}\n`
    }

    message += `\nüí° T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n‚Ä¢ T∆∞ v·∫•n c·∫£i thi·ªán t·∫≠p trung\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p\n‚Ä¢ Qu·∫£n l√Ω h√†nh vi ADHD\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng thu·ªëc\n‚Ä¢ K·ªπ thu·∫≠t th∆∞ gi√£n v√† t·∫≠p trung`

    return message
  }

  const getProgressText = (progress: string) => {
    switch (progress) {
      case "excellent":
        return "Xu·∫•t s·∫Øc"
      case "good":
        return "T·ªët"
      case "fair":
        return "Kh√°"
      case "needs_attention":
        return "C·∫ßn ch√∫ √Ω"
      default:
        return "ƒêang theo d√µi"
    }
  }

  // Auto-scroll to bottom when new messages are added
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector("[data-radix-scroll-area-viewport]")
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight
      }
    }
  }, [messages])

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion)
    inputRef.current?.focus()
  }

  const handleActionCard = async (card: ActionCard) => {
    let response = ""

    switch (card.type) {
      case "schedule":
        response =
          "T√¥i s·∫Ω gi√∫p b·∫°n t·∫°o l·ªãch tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p. H√£y cho t√¥i bi·∫øt m√¥n h·ªçc v√† th·ªùi gian b·∫°n mu·ªën s·∫Øp x·∫øp."
        break
      case "reward":
        response = `B·∫°n hi·ªán c√≥ ${childData?.rewardProfile?.currentPoints || 0} ƒëi·ªÉm. T√¥i c√≥ th·ªÉ g·ª£i √Ω m·ªôt s·ªë ph·∫ßn th∆∞·ªüng ph√π h·ª£p ho·∫∑c c√°ch ki·∫øm th√™m ƒëi·ªÉm.`
        break
      case "assessment":
        response = "T√¥i s·∫Ω ph√¢n t√≠ch t√¨nh h√¨nh ADHD c·ªßa b·∫°n d·ª±a tr√™n d·ªØ li·ªáu g·∫ßn ƒë√¢y v√† ƒë∆∞a ra khuy·∫øn ngh·ªã c·ª• th·ªÉ."
        break
      case "medication":
        response = "T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ vi·ªác s·ª≠ d·ª•ng thu·ªëc ADHD, t√°c d·ª•ng ph·ª• v√† c√°ch theo d√µi hi·ªáu qu·∫£ ƒëi·ªÅu tr·ªã."
        break
      case "focus":
        response =
          "H√£y c√πng t√¥i kh√°m ph√° c√°c k·ªπ thu·∫≠t c·∫£i thi·ªán t·∫≠p trung nh∆∞ Pomodoro, mindfulness v√† t·∫°o m√¥i tr∆∞·ªùng h·ªçc t·∫≠p t·ªëi ∆∞u."
        break
    }

    const assistantMessage: Message = {
      id: Date.now().toString(),
      role: "assistant",
      content: response,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, assistantMessage])
  }

  const generateActionCards = (userMessage: string, childData: any): ActionCard[] => {
    const cards: ActionCard[] = []
    const message = userMessage.toLowerCase()

    if (message.includes("l·ªãch") || message.includes("th·ªùi gian") || message.includes("h·ªçc")) {
      cards.push({
        type: "schedule",
        title: "T·∫°o l·ªãch tr√¨nh h·ªçc t·∫≠p",
        description: "L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p c√° nh√¢n h√≥a",
        action: "T·∫°o l·ªãch tr√¨nh",
      })
    }

    if (message.includes("ƒëi·ªÉm") || message.includes("th∆∞·ªüng") || message.includes("ƒë·ªông l·ª±c")) {
      cards.push({
        type: "reward",
        title: "H·ªá th·ªëng th∆∞·ªüng",
        description: `${childData?.rewardProfile?.currentPoints || 0} ƒëi·ªÉm hi·ªán c√≥`,
        action: "Xem ph·∫ßn th∆∞·ªüng",
      })
    }

    if (message.includes("ƒë√°nh gi√°") || message.includes("ti·∫øn ƒë·ªô") || message.includes("adhd")) {
      cards.push({
        type: "assessment",
        title: "ƒê√°nh gi√° ADHD",
        description: "Ph√¢n t√≠ch t√¨nh h√¨nh v√† ƒë∆∞a ra khuy·∫øn ngh·ªã",
        action: "Xem ƒë√°nh gi√°",
      })
    }

    if (message.includes("thu·ªëc") || message.includes("medication") || message.includes("u·ªëng")) {
      cards.push({
        type: "medication",
        title: "Qu·∫£n l√Ω thu·ªëc",
        description: "T∆∞ v·∫•n v√† theo d√µi vi·ªác d√πng thu·ªëc",
        action: "Xem l·ªãch u·ªëng thu·ªëc",
      })
    }

    if (message.includes("t·∫≠p trung") || message.includes("focus") || message.includes("pomodoro")) {
      cards.push({
        type: "focus",
        title: "C·∫£i thi·ªán t·∫≠p trung",
        description: "K·ªπ thu·∫≠t v√† ph∆∞∆°ng ph√°p tƒÉng c∆∞·ªùng t·∫≠p trung",
        action: "H·ªçc k·ªπ thu·∫≠t",
      })
    }

    return cards
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    if (!apiConfigured) {
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: "assistant",
        content:
          "‚ö†Ô∏è **C·∫ßn c·∫•u h√¨nh API Key**\n\nƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng tr√≤ chuy·ªán v·ªõi AI, b·∫°n c·∫ßn c·∫•u h√¨nh OpenAI API Key. Vui l√≤ng:\n\n1. Nh·∫•p v√†o n√∫t **C√†i ƒë·∫∑t API** ·ªü g√≥c tr√™n b√™n ph·∫£i\n2. Nh·∫≠p API Key t·ª´ OpenAI\n3. L∆∞u c√†i ƒë·∫∑t v√† quay l·∫°i\n\nTrong th·ªùi gian ch·ªù, t√¥i c√≥ th·ªÉ cung c·∫•p m·ªôt s·ªë l·ªùi khuy√™n c∆° b·∫£n v·ªÅ ADHD.",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, errorMessage])
      return
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input.trim(),
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    const currentInput = input.trim()
    setInput("")
    setIsLoading(true)

    try {
      const contextData = childData
        ? {
            childName: childData.child?.name || "B·∫°n nh·ªè",
            age: childData.child?.age || 8,
            currentFocusScore: childData.todayReport?.averageFocusScore || null,
            totalFocusTime: childData.todayReport?.totalFocusTime || null,
            rewardPoints: childData.rewardProfile?.currentPoints || null,
            adhdSeverity: childData.weeklyAssessment?.adhdSeverityScore || null,
            overallProgress: childData.weeklyAssessment?.overallProgress || null,
            medicationStatus: childData.medicationLogs?.length > 0 ? "active" : "none",
          }
        : {}

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: [
            {
              role: "system",
              content: `B·∫°n l√† Dr. AI, m·ªôt chuy√™n gia t∆∞ v·∫•n ADHD chuy√™n nghi·ªáp v√† th√¢n thi·ªán. 
              
              Th√¥ng tin v·ªÅ tr·∫ª:
              ${JSON.stringify(contextData, null, 2)}
              
              H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n c√° nh√¢n h√≥a. 
              Lu√¥n t√≠ch c·ª±c, khuy·∫øn kh√≠ch v√† ƒë∆∞a ra c√°c g·ª£i √Ω th·ª±c t·∫ø. 
              N·∫øu c·∫ßn t∆∞ v·∫•n y t·∫ø chuy√™n s√¢u, h√£y khuy√™n g·∫∑p b√°c sƒ© chuy√™n khoa.
              
              ${context ? `Context th√™m: ${context}` : ""}`,
            },
            ...messages.slice(-5).map((msg) => ({
              role: msg.role,
              content: msg.content,
            })),
            { role: "user", content: currentInput },
          ],
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()

      // Generate action cards based on user message
      const actionCards = generateActionCards(currentInput, childData)

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: data.content || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.",
        timestamp: new Date(),
        actionCards: actionCards.length > 0 ? actionCards : undefined,
      }

      setMessages((prev) => [...prev, assistantMessage])
    } catch (error) {
      console.error("Error sending message:", error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: `‚ùå **L·ªói k·∫øt n·ªëi**\n\nXin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI:\n\n${error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"}\n\nVui l√≤ng:\n1. Ki·ªÉm tra k·∫øt n·ªëi internet\n2. ƒê·∫£m b·∫£o API Key ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng\n3. Th·ª≠ l·∫°i sau √≠t ph√∫t\n\nTrong th·ªùi gian ch·ªù, b·∫°n c√≥ th·ªÉ xem c√°c g·ª£i √Ω b√™n d∆∞·ªõi.`,
        timestamp: new Date(),
        suggestions: ["C√†i ƒë·∫∑t API Key", "Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", "Li√™n h·ªá h·ªó tr·ª£"],
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
      // Focus back to input
      setTimeout(() => {
        inputRef.current?.focus()
      }, 100)
    }
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    })
  }

  const getActionIcon = (type: string) => {
    switch (type) {
      case "schedule":
        return <Calendar className="h-4 w-4" />
      case "reward":
        return <Award className="h-4 w-4" />
      case "assessment":
        return <TrendingUp className="h-4 w-4" />
      case "medication":
        return <Pill className="h-4 w-4" />
      case "focus":
        return <Brain className="h-4 w-4" />
      default:
        return <AlertCircle className="h-4 w-4" />
    }
  }

  if (isDataLoading) {
    return (
      <div className="flex flex-col h-full items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500 mb-4" />
        <p className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full">
      {/* Header with API Settings Link */}
      <div className="border-b bg-gray-50 px-1 sm:px-3 py-1.5 sm:py-2 flex items-center justify-between flex-shrink-0">
        <div className="flex items-center gap-1 sm:gap-2 min-w-0 flex-1">
          <Brain className="h-4 w-4 text-blue-600 flex-shrink-0" />
          <span className="text-xs sm:text-sm font-medium text-gray-700 truncate">Dr. AI - Tr·ª£ l√Ω ADHD</span>
          {!apiConfigured && (
            <Badge variant="destructive" className="text-xs px-1 py-0 h-5 flex-shrink-0">
              C·∫ßn API
            </Badge>
          )}
          {apiConfigured && (
            <Badge variant="secondary" className="text-xs px-1 py-0 h-5 flex-shrink-0">
              S·∫µn s√†ng
            </Badge>
          )}
        </div>
        <Link href="/settings/api">
          <Button variant="ghost" size="sm" className="text-xs px-2 py-1 h-7 flex-shrink-0">
            <Settings className="h-3 w-3 sm:mr-1" />
            <span className="hidden sm:inline">C√†i ƒë·∫∑t API</span>
          </Button>
        </Link>
      </div>

      {/* Messages */}
      <ScrollArea ref={scrollAreaRef} className="flex-1 px-1 sm:px-3 py-2 sm:py-3 min-h-0">
        <div className="space-y-2 sm:space-y-3">
          {messages.map((message) => (
            <div key={message.id} className="space-y-2">
              <div className={`flex gap-2 ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                {message.role === "assistant" && (
                  <div className="w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0">
                    <Brain className="h-3 w-3 sm:h-4 sm:w-4 text-white" />
                  </div>
                )}

                <div
                  className={`max-w-[95%] sm:max-w-[85%] ${
                    message.role === "user"
                      ? "bg-gradient-to-r from-blue-500 to-blue-600 text-white"
                      : "bg-white border border-gray-200 text-gray-900 shadow-sm"
                  } rounded-lg p-2 sm:p-3`}
                >
                  {message.role === "assistant" ? (
                    <MarkdownRenderer content={message.content} />
                  ) : (
                    <p className="text-sm whitespace-pre-wrap leading-relaxed">{message.content}</p>
                  )}
                  <p className={`text-xs mt-1 ${message.role === "user" ? "text-blue-100" : "text-gray-500"}`}>
                    {formatTime(message.timestamp)}
                  </p>
                </div>

                {message.role === "user" && (
                  <div className="w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gray-100 flex items-center justify-center flex-shrink-0">
                    <User className="h-3 w-3 sm:h-4 sm:w-4 text-gray-600" />
                  </div>
                )}
              </div>

              {/* Suggestions */}
              {message.suggestions && message.role === "assistant" && (
                <div className="ml-8 sm:ml-10 space-y-1 sm:space-y-2">
                  <p className="text-xs text-gray-500 font-medium">G·ª£i √Ω c√¢u h·ªèi:</p>
                  <div className="flex flex-wrap gap-1">
                    {message.suggestions.map((suggestion, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        size="sm"
                        className="text-xs h-6 sm:h-7 bg-transparent px-2 py-1"
                        onClick={() => handleSuggestionClick(suggestion)}
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                </div>
              )}

              {/* Action Cards */}
              {message.actionCards && message.role === "assistant" && (
                <div className="ml-8 sm:ml-10 space-y-1 sm:space-y-2">
                  <p className="text-xs text-gray-500 font-medium">H√†nh ƒë·ªông g·ª£i √Ω:</p>
                  <div className="grid gap-1 sm:gap-2">
                    {message.actionCards.map((card, index) => (
                      <Card
                        key={index}
                        className="cursor-pointer hover:shadow-md transition-shadow"
                        onClick={() => handleActionCard(card)}
                      >
                        <CardContent className="p-2">
                          <div className="flex items-center gap-2">
                            <div className="p-1.5 bg-blue-50 rounded-lg flex-shrink-0">{getActionIcon(card.type)}</div>
                            <div className="flex-1 min-w-0">
                              <h4 className="text-sm font-medium truncate">{card.title}</h4>
                              <p className="text-xs text-gray-600 truncate">{card.description}</p>
                            </div>
                            <Badge variant="outline" className="text-xs px-1 py-0 h-5 flex-shrink-0">
                              {card.action}
                            </Badge>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}

          {/* Loading Indicator */}
          {isLoading && (
            <div className="flex gap-2 justify-start">
              <div className="w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0">
                <Brain className="h-3 w-3 sm:h-4 sm:w-4 text-white" />
              </div>
              <div className="bg-white border border-gray-200 rounded-lg p-2 shadow-sm">
                <div className="flex items-center gap-2">
                  <Loader2 className="h-4 w-4 animate-spin text-blue-500" />
                  <span className="text-sm text-gray-600">Dr. AI ƒëang suy nghƒ©...</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input */}
      <div className="border-t bg-gray-50 p-1.5 sm:p-3 flex-shrink-0">
        <form onSubmit={handleSubmit} className="flex gap-2">
          <Input
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="H·ªèi Dr. AI v·ªÅ ADHD, h·ªçc t·∫≠p..."
            disabled={isLoading}
            className="flex-1 bg-white text-sm"
          />
          <Button
            type="submit"
            disabled={isLoading || !input.trim()}
            className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 px-3 sm:px-4"
          >
            {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
          </Button>
        </form>
      </div>
    </div>
  )
}
